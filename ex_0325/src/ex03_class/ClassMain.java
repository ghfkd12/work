package ex03_class;

public class ClassMain {
	public static void main(String[] args) {
		// 자동차 객체 c를 만든다.
		
		Car c;
		c = new Car();
		
		// 클래스에 선언된 필드를 사용하는법
		// 객체명.필드명;
		
		System.out.printf("바퀴의 개수는 %d개 입니다\n",c.wheel);
		
		// 구현한 메서드의 사용방법은 필드의 사용방법과 동일하다.
		// 다른 클래스에서 메서드를 사용하려면 객체를 생성한 후
		// 참조변수를 이용해 그 객체의 메서드를 사용해야 한다.
		
		// 객체명.메서드명();
		c.ride();
		c.ride();
		c.ride();
		c.ride();
		
		// 메서드를 한 번 선언해 두면 필요할 때마다 여러 번 호출하여 사용할 수 있다.
		// 즉, 메서드를 사용하면 반복적인 프로그래밍을 보다 쉽고 간단하게 해결할 수 있다.
		
		// 함수는 선언하고 호출
		
		// 생성자는 따로 선언한적 없는데
		// 객체를 만들 때 어떻게 호출이 되는가?
		// ㄴ 직접 선언하지 않아도 기본 생성자가 자동으로 생성되고 눈에 보이지 않는 것뿐이다.
		
		// 함수와 생성자의 차이점
		// 함수 : 반환형이 있음(void라도 있음), 이름이 다양함, 언제든지 호출 가능
		
		// 생성자 : 반환형이 없음, 무조건 클래스명을 따라감, 객체 생성될 때만 호출이 가능
		
		// 클래스에 들어가는 세가지 요소
		// 필드
		// ㄴ 일반 필드 -> 객체마다의 상태 (이름, 나이, 직업, 키, 몸무게, 주소 ...)
		// ㄴ 정적 필드 -> 객체 공통의 상태 (눈 개수, 코,귀 개수, 손가락 개수 ...)
		
		// 메서드 -> main
		// ㄴ 메서드는 메서드 안에서 정의할 수 없다.
		// ㄴ 메서드는 메서드 안에서만 호출할 수 있다.
		
		// 생성자 (선언할 수는 있는데 없으면 jvm이 대신 만들어 준다.)
		// 
		
		
		// 가족 구성원 객체를 생성
		Family father = new Family();
		Family son = new Family();
		
		// 정적변수는 클래스명.필드명을 통해 대입이나 출력을 한다.
		Family.address = "인천";
		System.out.println(Family.address);
		
		// 정적 변수와 정적 메서드의 경우에는 
		// 객체 생성없이 사용할 수 있다.
		System.out.println(Student.schoolName);
		Student.goToSchool();
		
		Student stu1 = new Student();
		stu1.studentName = "홍길동";
		stu1.hello();
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}	
}
